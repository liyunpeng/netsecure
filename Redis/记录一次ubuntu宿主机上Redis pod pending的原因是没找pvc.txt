先看pod详情
ubuntu1@docker-registry:~/k8s_yaml/redis$ k describe po redis-s-0
Name:           redis-s-0
Namespace:      default
Priority:       0
Node:           <none>
Labels:         app=redis-p
                appCluster=redis-cluster
                controller-revision-hash=redis-s-594bb76f9f
                statefulset.kubernetes.io/pod-name=redis-s-0
Annotations:    <none>
Status:         Pending
IP:
Controlled By:  StatefulSet/redis-s
Containers:
  redis-c:
    Image:       redis
    Ports:       6379/TCP, 16379/TCP
    Host Ports:  0/TCP, 0/TCP
    Command:
      redis-server
    Args:
      /etc/redis/redis.conf
      --protected-mode
      no
    Requests:
      cpu:        100m
      memory:     100Mi
    Environment:  <none>
    Mounts:
      /etc/redis from redis-conf (rw)
      /var/lib/redis from data-redis (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-x5g8r (ro)
Conditions:
  Type           Status
  PodScheduled   False
Volumes:
  data-redis:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  data-redis-redis-s-0
    ReadOnly:   false
  redis-conf:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      redis-conf
    Optional:  false
  default-token-x5g8r:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-x5g8r
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason            Age                From               Message
  ----     ------            ----               ----               -------
  Warning  FailedScheduling  15s (x2 over 16s)  default-scheduler  pod has unbound immediate PersistentVolumeClaims (repeated 3 times)

==============================================
 Type     Reason       Age   From               Message
  ----     ------       ----  ----               -------
  Normal   Scheduled    2m8s  default-scheduler  Successfully assigned default/redis-0 to etcd0
  Warning  FailedMount  2m7s  kubelet, etcd0     MountVolume.SetUp failed for volume "nfs-pv5" : mount failed: exit status 32
Mounting command: systemd-run
Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/ed8ff85a-5ad0-4afa-abe6-fe7ef87b9889/volumes/kubernetes.io~nfsnfs-pv5 --scope -- mount -t nfs 192.168.0.211:/usr/local/k8s/redis/pv5 /var/lib/kubelet/pods/ed8ff85a-5ad0-4afa-abe6-fe7ef87b9889/volumes/kubernetes.o~nfs/nfs-pv5
Output: Running scope as unit: run-rb6162c53c44e41e79bd443d735bfb73d.scope
mount.nfs: access denied by server while mounting 192.168.0.211:/usr/local/k8s/redis/pv5
  Warning  FailedMount  2m6s  kubelet, etcd0  MountVolume.SetUp failed for volume "nfs-pv5" : mount failed: exit status 32
warninng 错误就是error错误， 这里显示volume "nfs-pv5" 挂载失败。  原因是pod 要用pod所在的宿主机要安装nfs客户端工具， cento在安装nfs服务时， 就自动安装了nfs客户端， 但ubuntu没有。 

安装nfs客户端工具：
ubuntu1@docker-registry:~/k8s_yaml/redis$ sudo apt-get install nfs-common   -y
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
将会同时安装下列软件：
  keyutils libnfsidmap2 libtirpc1 rpcbind
建议安装：
  open-iscsi watchdog

下列【新】软件包将被安装：
  keyutils libnfsidmap2 libtirpc1 nfs-common rpcbind
升级了 0 个软件包，新安装了 5 个软件包，要卸载 0 个软件包，有 121 个软件包未被升级。
需要下载 397 kB 的归档。
解压缩后会消耗 1,358 kB 的额外空间。
获取:1 http://cn.archive.ubuntu.com/ubuntu bionic/main amd64 keyutils amd64 1.5.9-9.2ubuntu2 [47.9 kB]
获取:2 http://cn.archive.ubuntu.com/ubuntu bionic/main amd64 libnfsidmap2 amd64 0.25-5.1 [27.2 kB]
获取:3 http://cn.archive.ubuntu.com/ubuntu bionic-updates/main amd64 libtirpc1 amd64 0.2.5-1.2ubuntu0.1 [75.7 kB]
获取:4 http://cn.archive.ubuntu.com/ubuntu bionic/main amd64 rpcbind amd64 0.2.3-0.6 [40.6 kB]
获取:5 http://cn.archive.ubuntu.com/ubuntu bionic-updates/main amd64 nfs-common amd64 1:1.3.4-2.1ubuntu5.2 [205 kB]
已下载 397 kB，耗时 4秒 (102 kB/s)


每个redis pod所在的宿主机都要安装nfs客户端。 安装好后， pvc, pv要删除， nfs服务也要停止， 然后在启动nfs服务，在创建pv, pvc: 
kubectl批量删除pvc
 kubectl get pvc  | awk '{print $1}' |grep -v  NAME |xargs kubectl delete pvc

同理 批量删除 pv
 kubectl get pv  | awk '{print $1}' |grep -v  NAME |xargs kubectl delete pv


 node1@docker-app:~$ sudo /etc/init.d/nfs-kernel-server stop
 [ ok ] Stopping nfs-kernel-server (via systemctl): nfs-kernel-server.service.


 node1@docker-app:~$ sudo /etc/init.d/nfs-kernel-server start
 [....] Starting nfs-kernel-server (via systemctl): nfs-kernel-server.serviceJob for nfs-server.service canceled.
  failed!

看下服务状态
 node1@docker-app:~$ sudo /etc/init.d/nfs-kernel-server status
 ● nfs-server.service - NFS server and services
    Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)
    Active: failed (Result: exit-code) since Mon 2019-12-30 22:55:45 CST; 13s ago
   Process: 82794 ExecStopPost=/usr/sbin/exportfs -f (code=exited, status=0/SUCCESS)
   Process: 82788 ExecStopPost=/usr/sbin/exportfs -au (code=exited, status=0/SUCCESS)
   Process: 77754 ExecStop=/usr/sbin/rpc.nfsd 0 (code=exited, status=0/SUCCESS)
   Process: 42382 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)
   Process: 82787 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=1/FAILURE)
  Main PID: 42382 (code=exited, status=0/SUCCESS)
 Dec 30 22:55:44 docker-app systemd[1]: Starting NFS server and services...
 Dec 30 22:55:44 docker-app exportfs[82787]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export…edis/pv1".
 Dec 30 22:55:44 docker-app exportfs[82787]:   Assuming default behaviour ('no_subtree_check').
 Dec 30 22:55:44 docker-app exportfs[82787]:   NOTE: this default has changed since nfs-utils version 1.0.x
 Dec 30 22:55:44 docker-app exportfs[82787]: exportfs: /etc/exports:2: unknown keyword "inseruce"
 Dec 30 22:55:44 docker-app systemd[1]: nfs-server.service: Control process exited, code=exited status=1
 Dec 30 22:55:45 docker-app systemd[1]: nfs-server.service: Failed with result 'exit-code'.
 Dec 30 22:55:45 docker-app systemd[1]: Stopped NFS server and services.
 Hint: Some lines were ellipsized, use -l to show in full.


修改挂载目录权限， 避免写不进去
node1@docker-app:/usr/local/k8s/redis$ sudo chmod 777 *
node1@docker-app:/usr/local/k8s/redis$ ll
total 32
drwxr-xr-x 8 root root 4096 Dec 29 10:24 ./
drwxr-xr-x 3 root root 4096 Dec 29 10:24 ../
drwxrwxrwx 2 root root 4096 Dec 29 10:24 pv1/
drwxrwxrwx 2 root root 4096 Dec 29 10:24 pv2/
drwxrwxrwx 2 root root 4096 Dec 29 10:24 pv3/
drwxrwxrwx 2 root root 4096 Dec 30 23:01 pv4/
drwxrwxrwx 2 root root 4096 Dec 29 10:24 pv5/
drwxrwxrwx 2 root root 4096 Dec 29 10:24 pv6/

解除nfs网络文件系统的挂载：
ubuntu1@docker-registry:~/k8s_yaml/redis$ sudo umount 192.168.0.211:/usr/local/k8s/redis/pv4

创建pv, pvc
ubuntu1@docker-registry:~/k8s_yaml/redis$ k apply -f pv.yaml
persistentvolume/nfs-pv1 created
persistentvolume/nfs-vp2 created
persistentvolume/nfs-pv3 created
persistentvolume/nfs-pv4 created
persistentvolume/nfs-pv5 created
persistentvolume/nfs-pv6 created

ubuntu1@docker-registry:~/k8s_yaml/redis$ k apply -f pvc.yaml
persistentvolumeclaim/data-redis-0 created
persistentvolumeclaim/data-redis-1 created
persistentvolumeclaim/data-redis-2 created
persistentvolumeclaim/data-redis-3 created
persistentvolumeclaim/data-redis-4 created
persistentvolumeclaim/data-redis-5 created


ubuntu1@docker-registry:~/k8s_yaml/redis$ k apply -f statefulset.yaml
statefulset.apps/redis created

ubuntu1@docker-registry:~/k8s_yaml/redis$ k describe po redis-0
Name:           redis-0
Namespace:      default
Priority:       0
Node:           etcd0/192.168.0.204
Start Time:     Mon, 30 Dec 2019 23:07:22 +0800
Labels:         app=redis-p
                appCluster=redis-cluster
                controller-revision-hash=redis-56cfddcd57
                statefulset.kubernetes.io/pod-name=redis-0
Annotations:    cni.projectcalico.org/podIP: 192.169.3.2/32
Status:         Running
IP:             192.169.3.2
Controlled By:  StatefulSet/redis
Containers:
  redis-c:
    Container ID:  docker://1d8b210cc4ebdf13af101a5ae1dcea7864edc3188906efdb6dcc0d4fdd2246cb
    Image:         redis
    Image ID:      docker-pullable://redis@sha256:21b037b4f6964887bb12fd8d72d06c7ab1f231a58781b6ca2ceee0febfeb0d36
    Ports:         6379/TCP, 16379/TCP
    Host Ports:    0/TCP, 0/TCP
    Command:
      redis-server
    Args:
      /etc/redis/redis.conf
      --protected-mode
      no
    State:          Running
      Started:      Mon, 30 Dec 2019 23:07:35 +0800
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:        100m
      memory:     100Mi
    Environment:  <none>
    Mounts:
      /etc/redis from redis-conf (rw)
      /var/lib/redis from data (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-x5g8r (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  data:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  data-redis-0
    ReadOnly:   false
  redis-conf:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      redis-conf
    Optional:  false
  default-token-x5g8r:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-x5g8r
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  29s   default-scheduler  Successfully assigned default/redis-0 to etcd0
  Normal  Pulling    23s   kubelet, etcd0     Pulling image "redis"
  Normal  Pulled     17s   kubelet, etcd0     Successfully pulled image "redis"
  Normal  Created    17s   kubelet, etcd0     Created container redis-c
  Normal  Started    16s   kubelet, etcd0     Started container redis-c

过一段时间查看 pod， 都好了
ubuntu1@docker-registry:~/k8s_yaml/redis$ k get po -owide
NAME      READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES
redis-0   1/1     Running   0          61s   192.169.3.2   etcd0        <none>           <none>
redis-1   1/1     Running   0          46s   192.169.2.2   ubuntunode   <none>           <none>
redis-2   1/1     Running   0          34s   192.169.1.5   docker-app   <none>           <none>
redis-3   1/1     Running   0          25s   192.169.3.3   etcd0        <none>           <none>
redis-4   1/1     Running   0          19s   192.169.1.6   docker-app   <none>           <none>
redis-5   1/1     Running   0          11s   192.169.2.3   ubuntunode   <none>           <none>
