一个broker就是一台运行kakfa的服务的主机
 一个主题有多个分区，一个分区有多个副本， 每个副本在不同的broker上， 
每个分区的副本中有一个是leader副本，其他都是folloer副本
由于副本会分布在不同的主机上， 

生产者在把消息发给分区时， 会先发送到leader副本，然后再同步到其他副本， 
kafka会把消息

一个分区有副本组 

 
生产者重要参数：
与吞吐率相关的：
缓冲区buffer.memrory： 消息会先发到缓冲区， 然后有专门的线程从缓冲区里取消息，发送出去。 
如果缓冲区满了， 生产这就会进入阻塞状态。  阻塞状态超过规定时间， 就会抛出异常。 

线程取出消息，也不是立即发送， 会积累一定数量一起发送， 即批量发送， 
batch规定到了多少的量后会发送。 

有两个参数决定是否发送， 一个是batch到了一定的量， 一个是到时间了 。 

生产者和broker之间是用socket连接的。 
生产者每发送一个消息， 都会收到borker的应答。 
正常情况， 发送一个消息， 收到这个消息的响应在发送下一个， 
max.in.flight.requests.per.connection设置为1， 即能规定这个行为， 发一个，收一个，再发下一个。 但是有时想提高发送率，可以再没有收到本消息的响应，就发第2个， 第3个， 最多发多少个，有参数确定， 
一般设置为5， 即一个消息没得到回应， 可以再最都发5个。 
这个参数设置大于1， 就有消息乱序的风险。 因为第一个消息没到broker, 第2个 消息就到broker了。  造成消息乱序。 
 保守设置1， 最大设置5. 

消息系统， 必须保证， 
1. 消息不丢失， 通过设置acks=all, 表示没有收到相应就重发， all表示消息同步到了所有副本。 是最高级别的持久化
2. 消息的重复 通过设置enable.idempotence=true。保证broker对消息处理的幂等性， 不管发多少个重复的消息， broker都保证只记录该消息一次。 
3. 消息的乱序， 这个由生产者的max.in.flight.requests.per.connection==1保证
4. 生产者发送消息的阻塞， 设置memmory.buffer大的缓冲区， 和大的batch。 提高发送的吞吐率。 
	