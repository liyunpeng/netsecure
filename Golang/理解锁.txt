cas 乐观锁：
并发访问资源， 就需要对资源上锁。 
如果上的锁导致其他线程， 进入阻塞睡眠， 因为线程的睡眠和唤醒， 都需要切换上下文， 这个锁的代价是最大的。 也是最严格的锁。 mutex是睡眠锁， 因为goroutine，是比线程更轻，所以睡眠和唤醒的代价比java线程要小很多。 

如果其他线程，不会进入睡眠， 而是在一个循环里， 再次查询， 这个叫做自旋锁。 redis的分布式锁就是自旋锁。 
所以被锁住的资源如果占用时间太长， 就适合用睡眠锁。 
如果锁住的时间比较端， 即适合自选锁。 
可以成为悲观锁。  


通道有异步的， 和同步的， 
异步的用作消息队列。 比如生产者和消费者模式，
同步的一般用作控制gotinde的退出u， 如退出通道。 
共享资源的访问并发方式有， 锁， cas, 通道方式。 
共享资源的多个并行体是平行的， 不存在谁控制谁的问题， 
也不存在顺序先后问题， 