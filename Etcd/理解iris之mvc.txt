app := iris.New()
iris 全局的大对象，全局的东西都是用这个irs app对象操作

----------
log级别：
log的级别从低到高以为	:DEBUG、INFO、WARN、ERROR、FATAL
只有高于锁设置的级别的以上的log才能打印，
比如级别设置为info, 那么debug的级别是不打印的
app.Logger().SetLevel("debug")
app.Logger()所有的log都是打印到终端的，如：
app.Logger().Debug("iris启动服务")
debug是打印log最全的，如果不打印log， 看下log级别是不是debug

----------
iris的app对象只有一个，注册全局可用的， 即所有的控制器都可以使用的view的路径。
app.RegisterView(iris.HTML("./src/web/views/", ".html"))
比如在EtcdManangerController里面，
var v = mvc.View{
Name: "conf_manager.html",
}
这个view用的文件就是上面RegisterView注册的路径

----------
iris mvc控制器对象的注册有两种方式：
1. mvc.New 方式
由app.Party得到一个路由对象， party的参数就是一个路径，整个应有都是在这个路径下，
mvc.new 由这个路由对象， 创建一个mvc的app对象。
这个app就可以做很多事情，
注册一些服务，绑定控制器
etcdManagerApp := mvc.New(app.Party("/etcdmanager"))
etcdManagerApp.Register(etcdService)
etcdManagerApp.Handle(new(controllers.EtcdManangerController))

2. mvc.Configure 方式
mvc.Configure(app.Party("/basic"), controllers.BasicMVC)
BasicMVC 函数里面再对mvc对象注册一些服务，和绑定控制器
func BasicMVC(app *mvc.Application) {
	app.Register(
		sessions.New(sessions.Config{}).Start,
		&prefixedLogger{prefix: "1111111111111 DEV"},
	)
	app.Handle(new(BasicController))
}

----------
本程序因为只注册了etcdmanager mvc对象和控制器，该mvc对象对应的访问网址是
http://localhost:9081/etcdmanager
如果是http://localhost:9081， 因为没有该路径的mvc对象和控制器，浏览器会显示not found
