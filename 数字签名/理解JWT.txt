jwt是java web token 的缩写
用做身份验证，
用户第一次登陆时，
后台的login的会返回给用户一个jwt, 即一个签名字符串
用户后面再访问本网站的其他页面时，
都会在http的header里面带上这个jwt,
后台服务用jwt中间件检查用户的jwt, 完成身份验证

------------------------------------
JWT由三个部分组成：
1 JWT头
JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。
{
"alg": "HS256",
"typ": "JWT"
}
在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。
最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。

2 有效载荷
有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。
iss：发行人
exp：到期时间
sub：主题
aud：用户
nbf：在此之前不可用
iat：发布时间
jti：JWT ID用于标识该JWT
除以上默认字段外，我们还可以自定义私有字段，如下例：
{
"sub": "1234567890",
"name": "chongchong",
"admin": true
}
请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。
JSON对象也使用Base64 URL算法转换为字符串保存。

3 签名哈希
签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。
首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。
HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload),
secret)
在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用"."分隔，就构成整个JWT对象。

--------------------------------------
jwt的iris实现为：
github.com/iris-contrib/middleware/jwt
func JwtHandler() *jwt.Middleware {
	var mySecret = []byte("HS2JDFKhu7Y1av7b")
	return jwt.New(jwt.Config{
		ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
			return mySecret, nil
		},
		SigningMethod: jwt.SigningMethodHS256,
	})
}
JwtHandler 要生成用于管理jwt验证的jwt middleware对象， 其构造此对象的过程为：
先准备好一个16字节的一个字符串，作为一个secret.
然后用此secret，sha256签名算法， 构造一个jwt管理对象。
用此管理对象的serve
func (m *Middleware) Serve(ctx context.Context)
完成身份验证：
v1.PartyFunc("/admin", func(admin iris.Party) {
admin.Use(middleware.JwtHandler().Serve, casbinMiddleware.ServeHTTP)
admin是个路径路由对象， 
use方法表示， 该路径先路由到use里的程序， 然后在走到注册的程序。