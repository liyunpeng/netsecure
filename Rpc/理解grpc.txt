proto生成的go 文件命令指定了plugins， 这个决定了生成的service会生成什么样， 看列子

service UserInfoService{
//相当于接口内的方法
// 定义请求参数为UserRequest,响应参数为UserResponse
rpc GetUserInfo(UserRequest) returns (UserResponse){}
}
$ protoc -I . --go_out=plugins=grpc:. ./user.proto
经过这个命令， 生成的代码：
总的来说会定义出服务端接口和实现结构体,  注册服务端和向服务端注入业务的handler方法
如果使用要生成micro格式的， 则用命令：
$ protoc --proto_path=. --micro_out=. --go_out=. proto/user/user.proto  这个命令会调用proto-micro-gen这个bin执行文件
然后， 客户端接口，实现结构体， 和结构体使用者调用的方法

先看user服务端：
// UserInfoServiceServer is the server API for UserInfoService service.  会自动生成注释
type UserInfoServiceServer interface {
	//相当于接口内的方法     .proto写的注释会原封不动的出现在生成文件里 
	// 定义请求参数为UserRequest,响应参数为UserResponse
	GetUserInfo(context.Context, *UserRequest) (*UserResponse, error)
}

未实现的服务端
// UnimplementedUserInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserInfoServiceServer struct {
}

func (*UnimplementedUserInfoServiceServer) GetUserInfo(ctx context.Context, req *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}

向gprp.Server里注册该user服务
func RegisterUserInfoServiceServer(s *grpc.Server, srv UserInfoServiceServer) {
	s.RegisterService(&_UserInfoService_serviceDesc, srv)
}

向user服务注入业务依赖
func _UserInfoService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserInfoService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).GetUserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

user服务的描述变量
var _UserInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserInfoService",
	HandlerType: (*UserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserInfoService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

在来看业务提供者， 对生成的服务端的调用，先准备一个业务：
type UserInfoService struct {
}

var u = UserInfoService{}

// 实现服务端需要首先的接口
func (s *UserInfoService) GetUserInfo(ctx context.Context, req *pb.UserRequest) (resp *pb.UserResponse, err error) {
	name := req.Name
	// 在数据库查用户信息
	if name == "zhangsan" {
		resp = &pb.UserResponse{
			Id:   1,
			Name: name,
			Age:  22,
			//切片字段
			Hobby: []string{"Sing", "run", "basketball"},
		}
	}
	err = nil
	return
}

实际就调用了一句生成代码register：
	// 1. 监听
	addr := "127.0.0.1:8080"
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		fmt.Printf("监听异常：%s\n", err)
	}
	fmt.Printf("开始监听：%s\n", addr)
	// 2.实例化gRPC
	s := grpc.NewServer()
	// 3.在gRPC上注册微服务
	// 第二个参数类型需要接口类型的变量
	pb.RegisterUserInfoServiceServer(s, &u)
	// 4.启动gRPC服务
	s.Serve(lis)
对以上代码归纳一下： 创建一个tcp监听; 准备好grpcserver， 把业务u注入到server里; 把监听的放到grpcserver里面， 并启动这个grpc server



上面说了服务端的代码生成和业务提供者对生成代码的调用， 
接下来看客户端的， 
先看生成代码：
也是要有接口，和接口的实现
// UserInfoServiceClient is the client API for UserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserInfoServiceClient interface {
	//相当于接口内的方法
	// 定义请求参数为UserRequest,响应参数为UserResponse
	GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userInfoServiceClient struct {
	cc *grpc.ClientConn
}
客户端的生成代码就提供一个new 客制化服务的方法供业务使用者使用， micro也是这么个对外形式
func NewUserInfoServiceClient(cc *grpc.ClientConn) UserInfoServiceClient {
	return &userInfoServiceClient{cc}
}
供业务使用者的grpc方法。
func (c *userInfoServiceClient) GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserInfoService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
看业务使用者调用形式： 

	// 1. 创建与gRPC服务端的连接
	conn, err := grpc.Dial("127.0.0.1:8080", grpc.WithInsecure())
	if err != nil {
		fmt.Printf("连接异常：%s\n", err)
	}
	defer conn.Close()
	// 2. 实例化gRPC客户端
	client := pb.NewUserInfoServiceClient(conn)
	// 3. 组装参数
	req := new(pb.UserRequest)
	req.Name = "zhangsan"
	// 4. 调用接口
	resp, err := client.GetUserInfo(context.Background(), req)
	if err != nil {
		fmt.Printf("响应异常：%s\n", err)
	}
	fmt.Printf("响应结果: %v\n", resp)
简单说， 创建一个grpc连接， 从这个连接实例化出一个服务客户端，  从该客户端里调rpc方法。 

