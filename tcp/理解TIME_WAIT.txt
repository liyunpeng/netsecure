发起关闭的一方和接收关闭的一方，会根据接收信号的不同，进入不同的状态。 
A设置为发起关闭的一方，B设置为接收关闭的一方。 
Tcp的连接是双向的，所以有从A到B的连接，和从B到A的连接。

四次握手就是为了安全的关闭这两个连接，
FIN_WAIT_1状态：
A先发出FIN包， 
这时A进入FIN_WAIT_1状态，状态都是处于两个信号之间的， 
A在发出FIN包，再接收到ACK包之前， 一直处于FIN_WAIT_1状态。

FIN_WAIT_2状态：
A收到ACK包后，A就进入FIN_WAIT_2状态。

B没有将ACK和FIN放在一起的原因：
B随后在发送FIN包，而不是像建立连接的三次握手一样，将ACK和SYN放在一个包里发送过来
是因为B在手到FIN信号后，这种连接关闭的信号，B要做一些处理， 
B发送ACK后，就表示从A到B的连接就关闭释放了，叫做半连接状态。
还有B到A的连接，发起这个连接的动作之前，B要做些事情，
做完后，B发送FIN包，即开始关闭从B到A的连接动作。 

TIME_WAIT状态：
A再接到FIN之后，就会立即发送ACK
A发出ACK后， 就进入TIME_WAIT状态
不管任何情况， A都会进入TIME_WAIT状态，而且会维持2MSL时间, 
MSL是报文在网路中的最大存活时间，超过这个时间，网络自动丢弃这个报文 
不同系统，对MSL的定义不同
windowsw为2分钟，centos, ubuntu等linux系统为60秒

TIME_WAIT状态维持2MSL时间的原因：
之所以要在TIME_WAIT状态维持2Msl时间， 
是为了应对ACK包可能在网路中丢失的情况，
B如果没收到A的ACK，会重发FIN， 
A在TIME_WAIT状态，就是为了等待B重发的这个FIN，
等待的时间为2MSL, 
如果这个期间收到了B的FIN，说明B没有收到ACK, 此时，A立即重发ACK，并且TIME_WAIT时间重置为0，重新计时.

如果在这个期间没等到， 说明B已经成功接收到了ACK,  没有重发FIN。
TIME_WAIT状态结束，表示彻底完成Tcp连接的关闭过程。

TIME_WAIT状态查看：
对于发起断开连接的一方，
可以用sudo netstat -antp可以看到有些连接处于TIME_WAIT状态。
表示本机发起了关闭TCP连接，当前正在等待被关闭方的FIN.
linux系统，这个TIME_WAIT状态维持2分钟。 
2分钟内没有等到，TIME_WAIT状态结束，表示彻底完成Tcp连接的关闭过程
